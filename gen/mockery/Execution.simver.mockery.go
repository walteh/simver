// Code generated by mockery v2.36.1. DO NOT EDIT.

package mockery

import (
	mock "github.com/stretchr/testify/mock"
	simver "github.com/walteh/simver"
)

// MockExecution_simver is an autogenerated mock type for the Execution type
type MockExecution_simver struct {
	mock.Mock
}

type MockExecution_simver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecution_simver) EXPECT() *MockExecution_simver_Expecter {
	return &MockExecution_simver_Expecter{mock: &_m.Mock}
}

// BaseBranch provides a mock function with given fields:
func (_m *MockExecution_simver) BaseBranch() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExecution_simver_BaseBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseBranch'
type MockExecution_simver_BaseBranch_Call struct {
	*mock.Call
}

// BaseBranch is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) BaseBranch() *MockExecution_simver_BaseBranch_Call {
	return &MockExecution_simver_BaseBranch_Call{Call: _e.mock.On("BaseBranch")}
}

func (_c *MockExecution_simver_BaseBranch_Call) Run(run func()) *MockExecution_simver_BaseBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_BaseBranch_Call) Return(_a0 string) *MockExecution_simver_BaseBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_BaseBranch_Call) RunAndReturn(run func() string) *MockExecution_simver_BaseBranch_Call {
	_c.Call.Return(run)
	return _c
}

// BaseBranchTags provides a mock function with given fields:
func (_m *MockExecution_simver) BaseBranchTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_BaseBranchTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseBranchTags'
type MockExecution_simver_BaseBranchTags_Call struct {
	*mock.Call
}

// BaseBranchTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) BaseBranchTags() *MockExecution_simver_BaseBranchTags_Call {
	return &MockExecution_simver_BaseBranchTags_Call{Call: _e.mock.On("BaseBranchTags")}
}

func (_c *MockExecution_simver_BaseBranchTags_Call) Run(run func()) *MockExecution_simver_BaseBranchTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_BaseBranchTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_BaseBranchTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_BaseBranchTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_BaseBranchTags_Call {
	_c.Call.Return(run)
	return _c
}

// BaseCommit provides a mock function with given fields:
func (_m *MockExecution_simver) BaseCommit() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExecution_simver_BaseCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseCommit'
type MockExecution_simver_BaseCommit_Call struct {
	*mock.Call
}

// BaseCommit is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) BaseCommit() *MockExecution_simver_BaseCommit_Call {
	return &MockExecution_simver_BaseCommit_Call{Call: _e.mock.On("BaseCommit")}
}

func (_c *MockExecution_simver_BaseCommit_Call) Run(run func()) *MockExecution_simver_BaseCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_BaseCommit_Call) Return(_a0 string) *MockExecution_simver_BaseCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_BaseCommit_Call) RunAndReturn(run func() string) *MockExecution_simver_BaseCommit_Call {
	_c.Call.Return(run)
	return _c
}

// BaseCommitTags provides a mock function with given fields:
func (_m *MockExecution_simver) BaseCommitTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_BaseCommitTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseCommitTags'
type MockExecution_simver_BaseCommitTags_Call struct {
	*mock.Call
}

// BaseCommitTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) BaseCommitTags() *MockExecution_simver_BaseCommitTags_Call {
	return &MockExecution_simver_BaseCommitTags_Call{Call: _e.mock.On("BaseCommitTags")}
}

func (_c *MockExecution_simver_BaseCommitTags_Call) Run(run func()) *MockExecution_simver_BaseCommitTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_BaseCommitTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_BaseCommitTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_BaseCommitTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_BaseCommitTags_Call {
	_c.Call.Return(run)
	return _c
}

// HeadBranch provides a mock function with given fields:
func (_m *MockExecution_simver) HeadBranch() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExecution_simver_HeadBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadBranch'
type MockExecution_simver_HeadBranch_Call struct {
	*mock.Call
}

// HeadBranch is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) HeadBranch() *MockExecution_simver_HeadBranch_Call {
	return &MockExecution_simver_HeadBranch_Call{Call: _e.mock.On("HeadBranch")}
}

func (_c *MockExecution_simver_HeadBranch_Call) Run(run func()) *MockExecution_simver_HeadBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_HeadBranch_Call) Return(_a0 string) *MockExecution_simver_HeadBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_HeadBranch_Call) RunAndReturn(run func() string) *MockExecution_simver_HeadBranch_Call {
	_c.Call.Return(run)
	return _c
}

// HeadBranchTags provides a mock function with given fields:
func (_m *MockExecution_simver) HeadBranchTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_HeadBranchTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadBranchTags'
type MockExecution_simver_HeadBranchTags_Call struct {
	*mock.Call
}

// HeadBranchTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) HeadBranchTags() *MockExecution_simver_HeadBranchTags_Call {
	return &MockExecution_simver_HeadBranchTags_Call{Call: _e.mock.On("HeadBranchTags")}
}

func (_c *MockExecution_simver_HeadBranchTags_Call) Run(run func()) *MockExecution_simver_HeadBranchTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_HeadBranchTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_HeadBranchTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_HeadBranchTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_HeadBranchTags_Call {
	_c.Call.Return(run)
	return _c
}

// HeadCommit provides a mock function with given fields:
func (_m *MockExecution_simver) HeadCommit() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExecution_simver_HeadCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadCommit'
type MockExecution_simver_HeadCommit_Call struct {
	*mock.Call
}

// HeadCommit is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) HeadCommit() *MockExecution_simver_HeadCommit_Call {
	return &MockExecution_simver_HeadCommit_Call{Call: _e.mock.On("HeadCommit")}
}

func (_c *MockExecution_simver_HeadCommit_Call) Run(run func()) *MockExecution_simver_HeadCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_HeadCommit_Call) Return(_a0 string) *MockExecution_simver_HeadCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_HeadCommit_Call) RunAndReturn(run func() string) *MockExecution_simver_HeadCommit_Call {
	_c.Call.Return(run)
	return _c
}

// HeadCommitTags provides a mock function with given fields:
func (_m *MockExecution_simver) HeadCommitTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_HeadCommitTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadCommitTags'
type MockExecution_simver_HeadCommitTags_Call struct {
	*mock.Call
}

// HeadCommitTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) HeadCommitTags() *MockExecution_simver_HeadCommitTags_Call {
	return &MockExecution_simver_HeadCommitTags_Call{Call: _e.mock.On("HeadCommitTags")}
}

func (_c *MockExecution_simver_HeadCommitTags_Call) Run(run func()) *MockExecution_simver_HeadCommitTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_HeadCommitTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_HeadCommitTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_HeadCommitTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_HeadCommitTags_Call {
	_c.Call.Return(run)
	return _c
}

// IsMerge provides a mock function with given fields:
func (_m *MockExecution_simver) IsMerge() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecution_simver_IsMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMerge'
type MockExecution_simver_IsMerge_Call struct {
	*mock.Call
}

// IsMerge is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) IsMerge() *MockExecution_simver_IsMerge_Call {
	return &MockExecution_simver_IsMerge_Call{Call: _e.mock.On("IsMerge")}
}

func (_c *MockExecution_simver_IsMerge_Call) Run(run func()) *MockExecution_simver_IsMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_IsMerge_Call) Return(_a0 bool) *MockExecution_simver_IsMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_IsMerge_Call) RunAndReturn(run func() bool) *MockExecution_simver_IsMerge_Call {
	_c.Call.Return(run)
	return _c
}

// PR provides a mock function with given fields:
func (_m *MockExecution_simver) PR() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockExecution_simver_PR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PR'
type MockExecution_simver_PR_Call struct {
	*mock.Call
}

// PR is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) PR() *MockExecution_simver_PR_Call {
	return &MockExecution_simver_PR_Call{Call: _e.mock.On("PR")}
}

func (_c *MockExecution_simver_PR_Call) Run(run func()) *MockExecution_simver_PR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_PR_Call) Return(_a0 int) *MockExecution_simver_PR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_PR_Call) RunAndReturn(run func() int) *MockExecution_simver_PR_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecution_simver creates a new instance of MockExecution_simver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecution_simver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecution_simver {
	mock := &MockExecution_simver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.36.1. DO NOT EDIT.

package mockery

import (
	mock "github.com/stretchr/testify/mock"
	simver "github.com/walteh/simver"
)

// MockExecution_simver is an autogenerated mock type for the Execution type
type MockExecution_simver struct {
	mock.Mock
}

type MockExecution_simver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecution_simver) EXPECT() *MockExecution_simver_Expecter {
	return &MockExecution_simver_Expecter{mock: &_m.Mock}
}

// BaseBranchTags provides a mock function with given fields:
func (_m *MockExecution_simver) BaseBranchTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_BaseBranchTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseBranchTags'
type MockExecution_simver_BaseBranchTags_Call struct {
	*mock.Call
}

// BaseBranchTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) BaseBranchTags() *MockExecution_simver_BaseBranchTags_Call {
	return &MockExecution_simver_BaseBranchTags_Call{Call: _e.mock.On("BaseBranchTags")}
}

func (_c *MockExecution_simver_BaseBranchTags_Call) Run(run func()) *MockExecution_simver_BaseBranchTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_BaseBranchTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_BaseBranchTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_BaseBranchTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_BaseBranchTags_Call {
	_c.Call.Return(run)
	return _c
}

// BuildTags provides a mock function with given fields: tags
func (_m *MockExecution_simver) BuildTags(tags *simver.CalculationOutput) simver.Tags {
	ret := _m.Called(tags)

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func(*simver.CalculationOutput) simver.Tags); ok {
		r0 = rf(tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_BuildTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildTags'
type MockExecution_simver_BuildTags_Call struct {
	*mock.Call
}

// BuildTags is a helper method to define mock.On call
//   - tags *simver.CalculationOutput
func (_e *MockExecution_simver_Expecter) BuildTags(tags interface{}) *MockExecution_simver_BuildTags_Call {
	return &MockExecution_simver_BuildTags_Call{Call: _e.mock.On("BuildTags", tags)}
}

func (_c *MockExecution_simver_BuildTags_Call) Run(run func(tags *simver.CalculationOutput)) *MockExecution_simver_BuildTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*simver.CalculationOutput))
	})
	return _c
}

func (_c *MockExecution_simver_BuildTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_BuildTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_BuildTags_Call) RunAndReturn(run func(*simver.CalculationOutput) simver.Tags) *MockExecution_simver_BuildTags_Call {
	_c.Call.Return(run)
	return _c
}

// HeadBranchTags provides a mock function with given fields:
func (_m *MockExecution_simver) HeadBranchTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_HeadBranchTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadBranchTags'
type MockExecution_simver_HeadBranchTags_Call struct {
	*mock.Call
}

// HeadBranchTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) HeadBranchTags() *MockExecution_simver_HeadBranchTags_Call {
	return &MockExecution_simver_HeadBranchTags_Call{Call: _e.mock.On("HeadBranchTags")}
}

func (_c *MockExecution_simver_HeadBranchTags_Call) Run(run func()) *MockExecution_simver_HeadBranchTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_HeadBranchTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_HeadBranchTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_HeadBranchTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_HeadBranchTags_Call {
	_c.Call.Return(run)
	return _c
}

// IsMerged provides a mock function with given fields:
func (_m *MockExecution_simver) IsMerged() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecution_simver_IsMerged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMerged'
type MockExecution_simver_IsMerged_Call struct {
	*mock.Call
}

// IsMerged is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) IsMerged() *MockExecution_simver_IsMerged_Call {
	return &MockExecution_simver_IsMerged_Call{Call: _e.mock.On("IsMerged")}
}

func (_c *MockExecution_simver_IsMerged_Call) Run(run func()) *MockExecution_simver_IsMerged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_IsMerged_Call) Return(_a0 bool) *MockExecution_simver_IsMerged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_IsMerged_Call) RunAndReturn(run func() bool) *MockExecution_simver_IsMerged_Call {
	_c.Call.Return(run)
	return _c
}

// IsMinor provides a mock function with given fields:
func (_m *MockExecution_simver) IsMinor() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecution_simver_IsMinor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMinor'
type MockExecution_simver_IsMinor_Call struct {
	*mock.Call
}

// IsMinor is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) IsMinor() *MockExecution_simver_IsMinor_Call {
	return &MockExecution_simver_IsMinor_Call{Call: _e.mock.On("IsMinor")}
}

func (_c *MockExecution_simver_IsMinor_Call) Run(run func()) *MockExecution_simver_IsMinor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_IsMinor_Call) Return(_a0 bool) *MockExecution_simver_IsMinor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_IsMinor_Call) RunAndReturn(run func() bool) *MockExecution_simver_IsMinor_Call {
	_c.Call.Return(run)
	return _c
}

// PR provides a mock function with given fields:
func (_m *MockExecution_simver) PR() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockExecution_simver_PR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PR'
type MockExecution_simver_PR_Call struct {
	*mock.Call
}

// PR is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) PR() *MockExecution_simver_PR_Call {
	return &MockExecution_simver_PR_Call{Call: _e.mock.On("PR")}
}

func (_c *MockExecution_simver_PR_Call) Run(run func()) *MockExecution_simver_PR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_PR_Call) Return(_a0 int) *MockExecution_simver_PR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_PR_Call) RunAndReturn(run func() int) *MockExecution_simver_PR_Call {
	_c.Call.Return(run)
	return _c
}

// RootBranchTags provides a mock function with given fields:
func (_m *MockExecution_simver) RootBranchTags() simver.Tags {
	ret := _m.Called()

	var r0 simver.Tags
	if rf, ok := ret.Get(0).(func() simver.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(simver.Tags)
		}
	}

	return r0
}

// MockExecution_simver_RootBranchTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootBranchTags'
type MockExecution_simver_RootBranchTags_Call struct {
	*mock.Call
}

// RootBranchTags is a helper method to define mock.On call
func (_e *MockExecution_simver_Expecter) RootBranchTags() *MockExecution_simver_RootBranchTags_Call {
	return &MockExecution_simver_RootBranchTags_Call{Call: _e.mock.On("RootBranchTags")}
}

func (_c *MockExecution_simver_RootBranchTags_Call) Run(run func()) *MockExecution_simver_RootBranchTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecution_simver_RootBranchTags_Call) Return(_a0 simver.Tags) *MockExecution_simver_RootBranchTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecution_simver_RootBranchTags_Call) RunAndReturn(run func() simver.Tags) *MockExecution_simver_RootBranchTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecution_simver creates a new instance of MockExecution_simver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecution_simver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecution_simver {
	mock := &MockExecution_simver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
